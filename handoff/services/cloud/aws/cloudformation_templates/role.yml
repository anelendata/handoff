AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ResourceGroup:
    Type: String
    Description: The deploy group name
    MaxLength: 27
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
  GranteeAccountId:
    Type: String
    Description: The AWS account ID that gets granted to assume the role
    MaxLength: 27
    AllowedPattern: "[0-9][0-9]*"
  ExternalId:
    Type: String
    Description: The external ID
    MaxLength: 27
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
Resources:
  FargateDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceGroup}-FargateDeployRole-for-${GranteeAccountId}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - "Fn::Sub": "arn:aws:iam::${GranteeAccountId}:root"
              - "Fn::Sub": "arn:aws:iam::${GranteeAccountId}:role/handoffbot"
>>>>>>> master
          Action:
            - sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId: !Sub ${ExternalId}
      Path: /
      Policies:
        - PolicyName: !Sub ${ResourceGroup}-FargateDeployRole-for-${GranteeAccountId}
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - cloudformation:CancelUpdateStack
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              Resource: "*"
              # Resource: !Sub "arn:aws:cloudformation:*:*:stack/*${ResourceGroup}*/*"
            - Effect: Allow
              Action:
              - ec2:AssociateRouteTable
              - ec2:AttachInternetGateway
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateInternetGateway
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateSubnet
              - ec2:CreateVpc
              - ec2:DeleteInternetGateway
              - ec2:DeleteRoute
              - ec2:DeleteRouteTable
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSubnet
              - ec2:DeleteVpc
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInternetGateways
              - ec2:DescribeRouteTables
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - ec2:DetachInternetGateway
              - ec2:DisassociateRouteTable
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - ec2:RevokeSecurityGroupEgress
              - ec2:RevokeSecurityGroupEgress
              Resource: !Sub "arn:aws:ec2:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchDeleteImage
              - ecr:BatchGetImage
              - ecr:CompleteLayerUpload
              - ecr:CreateRepository
              - ecr:DeleteLifecyclePolicy
              - ecr:DeleteRepository
              - ecr:DeleteRepositoryPolicy
              - ecr:DescribeImageScanFindings
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr:GetLifecyclePolicy
              - ecr:GetLifecyclePolicyPreview
              - ecr:GetRepositoryPolicy
              - ecr:InitiateLayerUpload
              - ecr:ListImages
              - ecr:ListTagsForResource
              - ecr:PutImage
              - ecr:PutImageScanningConfiguration
              - ecr:PutImageTagMutability
              - ecr:PutLifecyclePolicy
              - ecr:StartImageScan
              - ecr:StartLifecyclePolicyPreview
              - ecr:TagResource
              - ecr:UntagResource
              - ecr:UploadLayerPart
              Resource: !Sub "arn:aws:ecr:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - ecs:CreateCluster
              - ecs:DeleteCluster
              - ecs:DeregisterContainerInstance
              - ecs:DeregisterTaskDefinition
              - ecs:DescribeClusters
              - ecs:DescribeTasks
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:RegisterTaskDefinition
              - ecs:RunTask
              - ecs:StartTask
              - ecs:StopTask
              - ecs:ListTasks
              Resource: "*"
              # Resource: !Sub "arn:aws:ecs:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - events:DeleteRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
              - events:ListRules
              - events:ListTargetsByRule
              Resource: "*"
              # Resource: !Sub "arn:aws:events:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - iam:PassRole
              - iam:ListRoles
              Resource: "*"
              # Resource: !Sub "arn:aws:iam::*:role/*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:FilterLogEvents
              - logs:GetLogDelivery
              - logs:GetLogEvents
              - logs:GetLogGroupFields
              - logs:GetLogRecord
              - logs:GetQueryResults
              - logs:PutRetentionPolicy
              - logs:StartQuery
              - logs:StopQuery
              - logs:TestMetricFilter
              - logs:PutMetricFilter
              - logs:DeleteMetricFilter
              Resource: "*"
              # Resource: !Sub "arn:aws:logs:*:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:PutBucketPublicAccessBlock
              - s3:PutEncryptionConfiguration
              - s3:PutObject
              Resource: !Sub "arn:aws:s3::*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - ssm:DeleteParameter
              - ssm:DeleteParameters
              - ssm:DescribeParameters
              - ssm:GetParameter
              - ssm:GetParameterHistory
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:PutParameter
              Resource: !Sub "arn:aws:ssm:*:*:*${ResourceGroup}*"
            - Effect: Allow
              Action:
              - sts:AssumeRole
              Resource: !Sub "arn:aws:sts::*:*${ResourceGroup}*"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceGroup}-TaskExecutionRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ResourceGroup}-TaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceGroup}-TaskRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ResourceGroup}-TaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - !Sub arn:aws:s3:::${ResourceGroup}*/*

            - Effect: Allow
              Action:
                - ssm:Describe*
                - ssm:Get*
                - ssm:List*
              Resource:
                - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/${ResourceGroup}*

  CloudWatchEventECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourceGroup}-CloudWatchEventECSRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ResourceGroup}--CloudwatchEventsInvokeECSRunTask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ecs:RunTask
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"
                Condition:
                  StringLike:
                    iam:PassedToService:
                      ecs-tasks.amazonaws.com

Outputs:
  TaskExecutionRoleArn:
    Description: TaskExecutionRole ARN
    Value:
      Ref: TaskExecutionRole
    Export:
      Name:
        "Fn::Sub": "${ResourceGroup}-TaskExecutionRoleArn"
  TaskRoleArn:
    Description: TaskRole ARN
    Value:
      Ref: TaskRole
    Export:
      Name:
        "Fn::Sub": "${ResourceGroup}-TaskRoleArn"
