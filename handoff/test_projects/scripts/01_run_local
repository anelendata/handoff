#!/bin/bash
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/.."

if [ ! -d $PROJECT_DIR/01_word_count ]; then
    echo The project does not exist...try running
    echo "    handoff quick_start start"
    echo in a new directory.
    exit 1
fi

cd $PROJECT_DIR
source scripts/colors

echo Welcome to module 01_run_local
echo We will learn how to run handoff local test using a project 01_word_count
echo "Ready? (ctl-c to quit anytime)"

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo Each project directory contains:
echo
for i in `ls 01_word_count`; do echo - $i; done

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo project.yml looks like:
echo
cat 01_word_count/project.yml

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo commands lists the commands and arguments. env lists the environment varaibles.

echo This example from 01_word_count runs a command line equivalent of:
echo
echo "    cat ./files/the_great_dictator_speech.txt | wc -w"
echo
CMD="handoff --project 01_word_count --workspace workspace run local"
echo Now let\'s run. Try entering this command below:
echo -e $GREEN    $CMD$RESET
echo
read -p "> "
while [[ ! $REPLY = $CMD ]]
do
    echo Hmm...you did not enter correctly, try again.
    read -p "> "
done
echo -e $DIM; $CMD; echo -e $RESET

echo If you see the output that looks like:

echo -e $DIM
echo "INFO - 2020-08-03 04:51:01,971 - handoff.config - Reading configurations from 01_word_count/project.yml"
echo "..."
echo "INFO - 2020-08-03 04:51:02,690 - handoff.config - Processed in 0:00:00.005756"
echo -e $RESET

echo Then great! You just ran the first local test. It created a workspace directory that looks like:
echo
for i in `ls workspace`; do echo - $i; done
echo And the word count is stored at workspace/artifacts/state. Here is the content:
echo
cat workspace/artifacts/state
echo

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo By the way, the example text is from the awesome speech by Charlie Chaplin\'s in the movie the Great Dictator.
echo Here is a link to the famous speech scene. Check out on YouTube: https://www.youtube.com/watch?v=J7GY1Xg6X20

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo And here is the first few paragraphs of the text:
echo -e $BLUE
head -n 4 01_word_count/files/the_great_dictator_speech.txt
echo -e $RESET

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo Now to the second example. This time project.yml looks like:
echo
cat 02_collect_stats/project.yml
echo

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo ...which is shell equivalent to
echo
echo "    cat ./files/the_great_dictator_speech.txt | python ./files/stats_collector.py | wc -w"
echo

echo The script for the second command stats_collector.py can be found in 02_collect_stats/files directory
echo and it is a Python script that looks like:

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

cat 02_collect_stats/files/stats_collector.py

echo
echo The script reads from stdin and counts the lines while passing the raw input to stdout.
echo "The raw text is then processed by the third command (wc -w) and it conts the number of words."

CMD="handoff --project 02_collect_stats --workspace workspace run local"

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo Now let\'s run. Try entering this command below:
echo -e $GREEN    $CMD$RESET
echo
read -p "> "
while [[ ! $REPLY = $CMD ]]
do
    echo Hmm...you did not enter correctly, try again.
    read -p "> "
done
echo -e $DIM; $CMD; echo -e $RESET

echo Let\'s check out the contents of the second command:
echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

cat workspace/artifacts/collect_stats.json

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo Great. This concludes this section of the tutorial.

echo -e $GREEN $BLINK; read -p "> " -n 1 -r; echo -e $RESET  # Prompt

echo Thanks for completing this section of tutorial. Oh, before you go,
echo do you use Twitter? Can you do me a favor and let your fellow engineers know about handoff?
echo -e $GREEN; read -p "Open your browser to auto-draft your tweet? (y/N) " -n 1 -r; echo -e $RESET  # Prompt
echo    # (optional) move to a new line

URL="https://twitter.com/intent/tweet?text=Engineers%21%20This%20is%20awesome.%20Just%20do%0Apip%20install%20handoff%0Aand%0Ahandoff%20quick_start%20start%0AAnd%20see%20what%20happens.%20https%3A%2F%2Fdev.handoff.cloud"
if [[ $REPLY =~ ^[Yy]$ ]]
then
open $URL
else
echo "OK! In case you change your mind, here is the link to auto-draft your tweets (you can edit before you tweet)"
echo -e $GREEN$URL$RESET
fi
echo

echo In the next section, we will try pullin the currency exchange rate data.
echo You will also learn how to create Python virtual enviroments for each command and pip-install commands.

echo -e $GREEN; read -p "Continue? (Y/n) " -n 1 -r; echo -e $RESET  # Prompt
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Nn]$ ]]
then
    echo "OK!"
    echo "Remember that you can continue by"
    echo -e $GREEN    $PROJECT_DIR/begin$RESET
    echo
    echo "bye!"
    exit 0
fi

$PROJECT_DIR/scripts/02_exchange_rates
